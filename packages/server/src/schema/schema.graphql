interface ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
}

interface Context implements ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements Context & ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  email: String!
  password: String!
  namedContexts: [NamedContext!]!
}

type NamedContext implements Context & ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  user: User!
  stub: String!
  name: String!
}

type Project implements ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
  stub: String!
  name: String!
  owner: ProjectOwner!
}

type Section {
  id: ID!
  owner: ProjectOwner!
  name: String!
}

type Query {
  user: User
  owner(id: ID!): ProjectOwner
  context(id: ID!): Context
}

input CreateNamedContextParams {
  name: String!
}

input CreateProjectParams {
  owner: ID
  name: String!
}

input CreateSectionParams {
  owner: ID
  name: String!
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean
  createNamedContext(params: CreateNamedContextParams!): NamedContext!
  deleteNamedContext(id: ID!): Boolean!
  createProject(params: CreateProjectParams!): Project!
  moveProject(id: ID!, owner: ID): Project
  deleteProject(id: ID!): Boolean!
  createSection(params: CreateSectionParams!): Section!
  moveSection(id: ID!, owner: ID): Section
  deleteSection(id: ID!): Boolean!
}
