interface Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
}

interface Context implements Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements Context & Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  email: String!
  password: String!
  namedContexts: [NamedContext!]!
}

type NamedContext implements Context & Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  user: User!
  stub: String!
  name: String!
}

type Project implements Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  stub: String!
  name: String!
  owner: Owner!
}

type Query {
  user: User
  owner(id: ID!): Owner
  context(id: ID!): Context
}

input CreateNamedContextParams {
  name: String!
}

input CreateProjectParams {
  name: String!
  owner: ID
}

input EditProjectParams {
  name: String!
  owner: ID
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean
  createNamedContext(params: CreateNamedContextParams!): NamedContext!
  deleteNamedContext(id: ID!): Boolean!
  createProject(params: CreateProjectParams!): Project!
  editProject(id: ID!, params: EditProjectParams!): Project
  deleteProject(id: ID!): Boolean!
}
