interface Item {
  id: ID!
  summary: String!
}

type Task implements Item {
  # Item
  id: ID!
  summary: String!

  done: Boolean!
  link: String
}

type File implements Item {
  # Item
  id: ID!
  summary: String!

  filename: String!
  mimetype: String!
  size: Int!
}

type Note implements Item {
  # Item
  id: ID!
  summary: String!

  note: String!
}

type Link implements Item {
  # Item
  id: ID!
  summary: String!

  icon: String
  link: String!
}

interface TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
}

interface ProjectRoot implements TaskList {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements ProjectRoot & TaskList @entity {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  email: String!
  password: String!
  contexts: [Context!]!
}

type Context implements ProjectRoot & TaskList @entity {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  user: User!
  stub: String!
  name: String!
}

type Project implements TaskList {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  id: ID!
  stub: String!
  name: String!
  taskList: TaskList!
}

type Section {
  items: [Item!]!

  id: ID!
  name: String!
}

type Query {
  user: User

  taskList(id: ID!): TaskList
  root(id: ID!): ProjectRoot
}

input CreateContextParams {
  name: String!
}

input EditContextParams {
  name: String
}

input CreateProjectParams {
  name: String!
}

input EditProjectParams {
  name: String
}

input CreateSectionParams {
  name: String!
}

input EditSectionParams {
  name: String
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createContext(params: CreateContextParams!): Context!
  editContext(id: ID!, params: EditContextParams!): Context
  deleteContext(id: ID!): Boolean!

  createProject(taskList: ID, params: CreateProjectParams!): Project!
  moveProject(id: ID!, taskList: ID): Project
  editProject(id: ID!, params: EditProjectParams!): Project
  deleteProject(id: ID!): Boolean!

  createSection(taskList: ID, before: ID, params: CreateSectionParams!): Section!
  moveSection(id: ID!, taskList: ID, before: ID): Section
  editSection(id: ID!, params: EditSectionParams!): Section
  deleteSection(id: ID!): Boolean!
}
