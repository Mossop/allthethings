interface Item {
  id: ID!
}

type Task implements Item {
  id: ID!
}

interface TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
}

interface ProjectRoot implements TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements ProjectRoot & TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  id: ID!
  email: String!
  password: String!
  contexts: [Context!]!
}

type Context implements ProjectRoot & TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
  projects: [Project!]!
  projectById(id: ID!): Project
  id: ID!
  user: User!
  stub: String!
  name: String!
}

type Project implements TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
  id: ID!
  stub: String!
  name: String!
  taskList: TaskList!
}

type Section {
  items: [Item!]!
  id: ID!
  name: String!
}

type Query {
  user: User
  taskList(id: ID!): TaskList
  root(id: ID!): ProjectRoot
}

input CreateContextParams {
  name: String!
}

input CreateProjectParams {
  taskList: ID
  name: String!
}

input CreateSectionParams {
  taskList: ID
  name: String!
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean
  createContext(params: CreateContextParams!): Context!
  deleteContext(id: ID!): Boolean!
  createProject(params: CreateProjectParams!): Project!
  moveProject(id: ID!, taskList: ID): Project
  deleteProject(id: ID!): Boolean!
  createSection(params: CreateSectionParams!): Section!
  moveSection(id: ID!, taskList: ID): Section
  deleteSection(id: ID!): Boolean!
}
