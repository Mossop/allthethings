interface Owner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  projectByStubs(stubs: [String!]!): Project
}

interface Context implements Owner {
  # Owner
  id: ID!
  context: Context!
  subprojects: [Project!]!
  projectByStubs(stubs: [String!]!): Project

  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements Context & Owner @entity {
  # Owner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  projectByStubs(stubs: [String!]!): Project

  # Context
  projects: [Project!]!
  projectById(id: ID!): Project

  email: String! @column
  password: String! @column
  namedContexts: [NamedContext!]!
}

type NamedContext implements Context & Owner @entity {
  # Owner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  projectByStubs(stubs: [String!]!): Project

  # Context
  projects: [Project!]!
  projectById(id: ID!): Project

  user: User! @link
  stub: String! @column
  name: String! @column
}

type Project implements Owner @entity(additionalFields: [
  { path: "parent", type: "ProjectDbObject['id'] | null" },
  { path: "user", type: "UserDbObject['id']" },
  { path: "namedContext", type: "NamedContextDbObject['id'] | null" },
]) {
  # Owner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  projectByStubs(stubs: [String!]!): Project

  stub: String! @column
  name: String! @column
  owner: Owner!
}

type Query {
  user: User

  owner(id: ID!): Owner
  context(id: ID!): Context
}

input CreateNamedContextParams {
  name: String!
}

input CreateProjectParams {
  name: String!
  owner: ID
}

input EditProjectParams {
  name: String!
  owner: ID
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createNamedContext(params: CreateNamedContextParams!): NamedContext!
  deleteNamedContext(id: ID!): Boolean!

  createProject(params: CreateProjectParams!): Project!
  editProject(id: ID!, params: EditProjectParams!): Project
  deleteProject(id: ID!): Boolean!
}
