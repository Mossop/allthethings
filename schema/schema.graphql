scalar DateTime

interface Item {
  id: ID!
  summary: String!
  archived: Boolean!
  created: DateTime!
}

type Task implements Item {
  # Item
  id: ID!
  summary: String!
  archived: Boolean!
  created: DateTime!

  due: DateTime
  done: DateTime
  link: String
}

type File implements Item {
  # Item
  id: ID!
  summary: String!
  archived: Boolean!
  created: DateTime!

  filename: String!
  mimetype: String!
  size: Int!
}

type Note implements Item {
  # Item
  id: ID!
  summary: String!
  archived: Boolean!
  created: DateTime!

  note: String!
}

type Link implements Item {
  # Item
  id: ID!
  summary: String!
  archived: Boolean!
  created: DateTime!

  icon: String
  link: String!
}

interface TaskList {
  remainingTasks: Int!
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!
}

interface ProjectRoot implements TaskList {
  # TaskList
  remainingTasks: Int!
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements ProjectRoot & TaskList @entity {
  # TaskList
  remainingTasks: Int!
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  email: String!
  password: String!
  contexts: [Context!]!
}

type Context implements ProjectRoot & TaskList @entity {
  # TaskList
  remainingTasks: Int!
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  user: User!
  stub: String!
  name: String!
}

type Project implements TaskList {
  # TaskList
  remainingTasks: Int!
  subprojects: [Project!]!
  sections: [Section!]!
  items: [Item!]!

  id: ID!
  stub: String!
  name: String!
  taskList: TaskList!
}

type Section {
  remainingTasks: Int!
  items: [Item!]!

  id: ID!
  name: String!
}

type Query {
  user: User

  taskList(id: ID!): TaskList
  root(id: ID!): ProjectRoot
}

input ContextParams {
  name: String!
}

input ProjectParams {
  name: String!
}

input SectionParams {
  name: String!
}

input TaskParams {
  archived: Boolean!
  summary: String!
  done: DateTime
  link: String
  due: DateTime
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createContext(params: ContextParams!): Context!
  editContext(id: ID!, params: ContextParams!): Context
  deleteContext(id: ID!): Boolean!

  createProject(taskList: ID, params: ProjectParams!): Project!
  moveProject(id: ID!, taskList: ID): Project
  editProject(id: ID!, params: ProjectParams!): Project
  deleteProject(id: ID!): Boolean!

  createSection(taskList: ID, before: ID, params: SectionParams!): Section!
  moveSection(id: ID!, taskList: ID, before: ID): Section
  editSection(id: ID!, params: SectionParams!): Section
  deleteSection(id: ID!): Boolean!

  createTask(list: ID, params: TaskParams!): Task!
  editTask(id: ID!, params: TaskParams!): Task

  moveItem(id: ID!, parent: ID, before: ID): Item
  deleteItem(id: ID!): Boolean!
}
