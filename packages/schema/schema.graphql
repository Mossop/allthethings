scalar DateTime

type TaskInfo {
  due: DateTime
  done: DateTime
  controller: String!
}

type PluginDetail {
  pluginId: String!
  hasTaskState: Boolean!
  wasEverListed: Boolean!
  isCurrentlyListed: Boolean!
  fields: String!
  lists: [PluginList!]!
}

type FileDetail {
  filename: String!
  mimetype: String!
  size: Int!
}

type NoteDetail {
  note: String!
}

type LinkDetail {
  icon: String
  url: String!
}

union ItemDetail = PluginDetail | LinkDetail | NoteDetail | FileDetail

type PluginList {
  id: ID!
  pluginId: String!
  name: String!
  url: String
}

type Item {
  id: ID!
  summary: String!
  created: DateTime!
  archived: DateTime
  snoozed: DateTime

  taskInfo: TaskInfo
  detail: ItemDetail
}

type ItemSet {
  count: Int!
  items: [Item!]!
}

interface TaskList {
  remainingTasks: ItemSet!
  subprojects: [Project!]!
  sections: [Section!]!
  items: ItemSet!
}

interface ProjectRoot implements TaskList {
  # TaskList
  remainingTasks: ItemSet!
  subprojects: [Project!]!
  sections: [Section!]!
  items: ItemSet!
  overdueItems: ItemSet!

  projects: [Project!]!
  projectById(id: ID!): Project
}

type Inbox {
  items: ItemSet!
}

type User implements ProjectRoot & TaskList {
  # TaskList
  remainingTasks: ItemSet!
  subprojects: [Project!]!
  sections: [Section!]!
  items: ItemSet!
  overdueItems: ItemSet!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  email: String!
  contexts: [Context!]!
  inbox: Inbox!
  isAdmin: Boolean!
}

type Context implements ProjectRoot & TaskList {
  # TaskList
  remainingTasks: ItemSet!
  subprojects: [Project!]!
  sections: [Section!]!
  items: ItemSet!
  overdueItems: ItemSet!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID!
  user: User!
  stub: String!
  name: String!
}

type Project implements TaskList {
  # TaskList
  remainingTasks: ItemSet!
  subprojects: [Project!]!
  sections: [Section!]!
  items: ItemSet!

  id: ID!
  stub: String!
  name: String!
  taskList: TaskList!
}

type Section {
  remainingTasks: ItemSet!
  items: ItemSet!

  id: ID!
  name: String!
}

type Query {
  user: User

  users: [User!]!
  taskList(id: ID!): TaskList
  root(id: ID!): ProjectRoot
}

input ContextParams {
  name: String!
}

input ProjectParams {
  name: String!
}

input SectionParams {
  name: String!
}

input ItemParams {
  summary: String!
  archived: DateTime
  snoozed: DateTime
}

input TaskInfoParams {
  due: DateTime
  done: DateTime
}

input LinkDetailParams {
  url: String!
}

input NoteDetailParams {
  note: String!
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createContext(params: ContextParams!): Context!
  editContext(id: ID!, params: ContextParams!): Context
  deleteContext(id: ID!): Boolean!

  createProject(taskList: ID, params: ProjectParams!): Project!
  moveProject(id: ID!, taskList: ID): Project
  editProject(id: ID!, params: ProjectParams!): Project
  deleteProject(id: ID!): Boolean!

  createSection(taskList: ID, before: ID, params: SectionParams!): Section!
  moveSection(id: ID!, taskList: ID, before: ID): Section
  editSection(id: ID!, params: SectionParams!): Section
  deleteSection(id: ID!): Boolean!

  createTask(list: ID, item: ItemParams!): Item!
  createNote(list: ID, item: ItemParams!, detail: NoteDetailParams!, isTask: Boolean!): Item!
  createLink(list: ID, item: ItemParams!, detail: LinkDetailParams!, isTask: Boolean!): Item!

  editItem(id: ID!, item: ItemParams!): Item
  editTaskInfo(id: ID!, taskInfo: TaskInfoParams): Item
  editTaskController(id: ID!, controller: String): Item

  moveItem(id: ID!, parent: ID, before: ID): Item
  deleteItem(id: ID!): Boolean!

  archiveItem(id: ID!, archived: DateTime): Item
  snoozeItem(id: ID!, snoozed: DateTime): Item
  markItemDue(id: ID!, due: DateTime): Item

  createUser(email: String!, password: String!, isAdmin: Boolean): User!
  deleteUser(id: ID!): Boolean
}
