interface ProjectOwner {
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!
}

interface Context implements ProjectOwner {
  # ProjectOwner
  id: ID!
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!

  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements Context & ProjectOwner @entity {
  # ProjectOwner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!

  # Context
  projects: [Project!]!
  projectById(id: ID!): Project

  email: String! @column
  password: String! @column
  namedContexts: [NamedContext!]!
}

type NamedContext implements Context & ProjectOwner @entity {
  # ProjectOwner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!

  # Context
  projects: [Project!]!
  projectById(id: ID!): Project

  user: User! @link
  stub: String! @column
  name: String! @column
}

type Project implements ProjectOwner @entity(additionalFields: [
  { path: "user", type: "UserDbObject['id']" },
  { path: "namedContext", type: "NamedContextDbObject['id'] | null" },
  { path: "parent", type: "ProjectDbObject['id'] | null" },
]) {
  # ProjectOwner
  id: ID! @id
  context: Context!
  subprojects: [Project!]!
  sections: [Section!]!

  stub: String! @column
  name: String! @column
  owner: ProjectOwner!
}

type Section @entity(additionalFields: [
  { path: "user", type: "UserDbObject['id']" },
  { path: "namedContext", type: "NamedContextDbObject['id'] | null" },
  { path: "project", type: "ProjectDbObject['id'] | null" },
]) {
  id: ID! @id
  owner: ProjectOwner!

  name: String! @column
}

type Query {
  user: User

  owner(id: ID!): ProjectOwner
  context(id: ID!): Context
}

input CreateNamedContextParams {
  name: String!
}

input CreateProjectParams {
  owner: ID
  name: String!
}

input CreateSectionParams {
  owner: ID
  name: String!
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createNamedContext(params: CreateNamedContextParams!): NamedContext!
  deleteNamedContext(id: ID!): Boolean!

  createProject(params: CreateProjectParams!): Project!
  moveProject(id: ID!, owner: ID): Project
  deleteProject(id: ID!): Boolean!

  createSection(params: CreateSectionParams!): Section!
  moveSection(id: ID!, owner: ID): Section
  deleteSection(id: ID!): Boolean!
}
