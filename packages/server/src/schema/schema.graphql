interface Owner {
  id: ID!
  user: User!
  context: Context!
  subprojects: [Project!]!
}

interface Context {
  projects: [Project!]!
}

type User implements Context & Owner {
  id: ID!
  email: String!
  password: String!
  namedContexts: [NamedContext!]!
  user: User!
  context: Context!
  projects: [Project!]!
  subprojects: [Project!]!
}

type NamedContext implements Context & Owner {
  id: ID!
  user: User!
  context: Context!
  stub: String!
  name: String!
  projects: [Project!]!
  subprojects: [Project!]!
}

type Project implements Owner {
  id: ID!
  user: User!
  context: Context!
  namedContext: NamedContext
  parent: Project
  owner: Owner!
  stub: String!
  name: String!
  subprojects: [Project!]!
}

type Query {
  user: User
  owner(id: ID!): Owner
}

input CreateNamedContextParams {
  name: String!
}

input CreateProjectParams {
  name: String!
  owner: ID
}

input UpdateProjectParams {
  name: String!
  owner: ID
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean
  createNamedContext(params: CreateNamedContextParams!): NamedContext!
  deleteNamedContext(id: ID!): Boolean!
  createProject(params: CreateProjectParams!): Project!
  deleteProject(id: ID!): Boolean!
}
