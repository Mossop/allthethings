interface TaskList {
  subprojects: [Project!]!
  sections: [Section!]!
}

interface ProjectRoot implements TaskList {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!

  projects: [Project!]!
  projectById(id: ID!): Project
}

type User implements ProjectRoot & TaskList @entity {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID! @id
  email: String! @column
  password: String! @column
  contexts: [Context!]!
}

type Context implements ProjectRoot & TaskList @entity {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!

  # ProjectRoot
  projects: [Project!]!
  projectById(id: ID!): Project

  id: ID! @id
  user: User! @link
  stub: String!
  name: String! @column
}

type Project implements TaskList @entity(additionalFields: [
  { path: "user", type: "UserDbObject['id']" },
  { path: "context", type: "ContextDbObject['id'] | null" },
  { path: "parent", type: "ProjectDbObject['id'] | null" },
]) {
  # TaskList
  subprojects: [Project!]!
  sections: [Section!]!

  id: ID! @id
  stub: String!
  name: String! @column
  taskList: TaskList!
}

type Section @entity(additionalFields: [
  { path: "user", type: "UserDbObject['id']" },
  { path: "context", type: "ContextDbObject['id'] | null" },
  { path: "project", type: "ProjectDbObject['id'] | null" },
]) {
  id: ID! @id
  name: String! @column
}

type Query {
  user: User

  taskList(id: ID!): TaskList
  root(id: ID!): ProjectRoot
}

input CreateContextParams {
  name: String!
}

input CreateProjectParams {
  taskList: ID
  name: String!
}

input CreateSectionParams {
  taskList: ID
  name: String!
}

type Mutation {
  login(email: String!, password: String!): User
  logout: Boolean

  createContext(params: CreateContextParams!): Context!
  deleteContext(id: ID!): Boolean!

  createProject(params: CreateProjectParams!): Project!
  moveProject(id: ID!, taskList: ID): Project
  deleteProject(id: ID!): Boolean!

  createSection(params: CreateSectionParams!): Section!
  moveSection(id: ID!, taskList: ID): Section
  deleteSection(id: ID!): Boolean!
}
