{
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "Pick_PhabricatorAccountEntity.id-or-email-or-url-or-apiKey_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "url",
          "apiKey"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "PhabricatorAccountState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pick_PhabricatorAccountEntity.id-or-email-or-url-or-apiKey_"
          },
          {
            "properties": {
              "enabledQueries": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "icon": {
                "type": "string"
              }
            },
            "required": [
              "enabledQueries",
              "icon"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_PhabricatorAccountEntity.url-or-apiKey_": {
        "properties": {
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "apiKey"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "PhabricatorAccountParams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pick_PhabricatorAccountEntity.url-or-apiKey_"
          },
          {
            "properties": {
              "queries": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "queries"
            ],
            "type": "object"
          }
        ]
      },
      "Partial_PhabricatorAccountParams_": {
        "properties": {
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "queries": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_PhabricatorQueryEntity.queryId_": {
        "properties": {
          "queryId": {
            "type": "string"
          }
        },
        "required": [
          "queryId"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "PhabricatorQueryState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pick_PhabricatorQueryEntity.queryId_"
          },
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "description",
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_JiraAccountEntity.Exclude_keyofJiraAccountEntity.userId__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "apiToken": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "serverName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "apiToken",
          "email",
          "serverName",
          "url",
          "userName"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_JiraAccountEntity.userId_": {
        "$ref": "#/components/schemas/Pick_JiraAccountEntity.Exclude_keyofJiraAccountEntity.userId__"
      },
      "Pick_JiraSearchEntity.Exclude_keyofJiraSearchEntity.accountId__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_JiraSearchEntity.accountId_": {
        "$ref": "#/components/schemas/Pick_JiraSearchEntity.Exclude_keyofJiraSearchEntity.accountId__"
      },
      "JiraSearchState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_JiraSearchEntity.accountId_"
          },
          {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          }
        ]
      },
      "JiraAccountState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_JiraAccountEntity.userId_"
          },
          {
            "properties": {
              "searches": {
                "items": {
                  "$ref": "#/components/schemas/JiraSearchState"
                },
                "type": "array"
              }
            },
            "required": [
              "searches"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_JiraAccountEntity.Exclude_keyofJiraAccountEntity.id-or-userId-or-serverName-or-userName__": {
        "properties": {
          "apiToken": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "apiToken",
          "email",
          "url"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_JiraAccountEntity.id-or-userId-or-serverName-or-userName_": {
        "$ref": "#/components/schemas/Pick_JiraAccountEntity.Exclude_keyofJiraAccountEntity.id-or-userId-or-serverName-or-userName__"
      },
      "JiraAccountParams": {
        "$ref": "#/components/schemas/Omit_JiraAccountEntity.id-or-userId-or-serverName-or-userName_"
      },
      "Pick_JiraSearchEntity.Exclude_keyofJiraSearchEntity.id-or-accountId__": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_JiraSearchEntity.id-or-accountId_": {
        "$ref": "#/components/schemas/Pick_JiraSearchEntity.Exclude_keyofJiraSearchEntity.id-or-accountId__"
      },
      "JiraSearchParams": {
        "$ref": "#/components/schemas/Omit_JiraSearchEntity.id-or-accountId_"
      },
      "Partial_JiraSearchParams_": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_GoogleAccountEntity.Exclude_keyofGoogleAccountEntity.userId-or-accessToken-or-refreshToken-or-expiry__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "avatar"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GoogleAccountEntity.userId-or-accessToken-or-refreshToken-or-expiry_": {
        "$ref": "#/components/schemas/Pick_GoogleAccountEntity.Exclude_keyofGoogleAccountEntity.userId-or-accessToken-or-refreshToken-or-expiry__"
      },
      "Pick_GoogleMailSearchEntity.Exclude_keyofGoogleMailSearchEntity.accountId__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GoogleMailSearchEntity.accountId_": {
        "$ref": "#/components/schemas/Pick_GoogleMailSearchEntity.Exclude_keyofGoogleMailSearchEntity.accountId__"
      },
      "GoogleMailSearchState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_GoogleMailSearchEntity.accountId_"
          },
          {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          }
        ]
      },
      "GoogleAccountState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_GoogleAccountEntity.userId-or-accessToken-or-refreshToken-or-expiry_"
          },
          {
            "properties": {
              "mailSearches": {
                "items": {
                  "$ref": "#/components/schemas/GoogleMailSearchState"
                },
                "type": "array"
              },
              "loginUrl": {
                "type": "string"
              }
            },
            "required": [
              "mailSearches",
              "loginUrl"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_GoogleMailSearchState.Exclude_keyofGoogleMailSearchState.id-or-url-or-accountId__": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GoogleMailSearchState.id-or-url-or-accountId_": {
        "$ref": "#/components/schemas/Pick_GoogleMailSearchState.Exclude_keyofGoogleMailSearchState.id-or-url-or-accountId__"
      },
      "GoogleMailSearchParams": {
        "$ref": "#/components/schemas/Omit_GoogleMailSearchState.id-or-url-or-accountId_"
      },
      "Partial_GoogleMailSearchParams_": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_GithubAccountEntity.Exclude_keyofGithubAccountEntity.userId-or-token__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "user",
          "avatar"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GithubAccountEntity.userId-or-token_": {
        "$ref": "#/components/schemas/Pick_GithubAccountEntity.Exclude_keyofGithubAccountEntity.userId-or-token__"
      },
      "Pick_GithubSearchEntity.Exclude_keyofGithubSearchEntity.accountId__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GithubSearchEntity.accountId_": {
        "$ref": "#/components/schemas/Pick_GithubSearchEntity.Exclude_keyofGithubSearchEntity.accountId__"
      },
      "GithubSearchState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_GithubSearchEntity.accountId_"
          },
          {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          }
        ]
      },
      "GithubAccountState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_GithubAccountEntity.userId-or-token_"
          },
          {
            "properties": {
              "searches": {
                "items": {
                  "$ref": "#/components/schemas/GithubSearchState"
                },
                "type": "array"
              },
              "loginUrl": {
                "type": "string"
              }
            },
            "required": [
              "searches",
              "loginUrl"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_GithubSearchEntity.Exclude_keyofGithubSearchEntity.id-or-accountId__": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_GithubSearchEntity.id-or-accountId_": {
        "$ref": "#/components/schemas/Pick_GithubSearchEntity.Exclude_keyofGithubSearchEntity.id-or-accountId__"
      },
      "GithubSearchParams": {
        "$ref": "#/components/schemas/Omit_GithubSearchEntity.id-or-accountId_"
      },
      "Partial_GithubSearchParams_": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_BugzillaAccountEntity.id-or-name-or-icon-or-url_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "icon",
          "url"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "SearchType": {
        "enum": [
          "quick",
          "advanced"
        ],
        "type": "string",
        "x-enum-varnames": [
          "Quicksearch",
          "Advanced"
        ]
      },
      "Pick_BugzillaSearchEntity.Exclude_keyofBugzillaSearchEntity.accountId__": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SearchType"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "query",
          "type",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_BugzillaSearchEntity.accountId_": {
        "$ref": "#/components/schemas/Pick_BugzillaSearchEntity.Exclude_keyofBugzillaSearchEntity.accountId__"
      },
      "BugzillaSearchState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_BugzillaSearchEntity.accountId_"
          },
          {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          }
        ]
      },
      "BugzillaAccountState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pick_BugzillaAccountEntity.id-or-name-or-icon-or-url_"
          },
          {
            "properties": {
              "searches": {
                "items": {
                  "$ref": "#/components/schemas/BugzillaSearchState"
                },
                "type": "array"
              }
            },
            "required": [
              "searches"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_BugzillaAccountEntity.Exclude_keyofBugzillaAccountEntity.id-or-userId-or-icon__": {
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "url",
          "username",
          "password"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_BugzillaAccountEntity.id-or-userId-or-icon_": {
        "$ref": "#/components/schemas/Pick_BugzillaAccountEntity.Exclude_keyofBugzillaAccountEntity.id-or-userId-or-icon__"
      },
      "BugzillaAccountParams": {
        "$ref": "#/components/schemas/Omit_BugzillaAccountEntity.id-or-userId-or-icon_"
      },
      "Pick_BugzillaSearchEntity.Exclude_keyofBugzillaSearchEntity.id-or-accountId-or-type__": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "query",
          "dueOffset"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_BugzillaSearchEntity.id-or-accountId-or-type_": {
        "$ref": "#/components/schemas/Pick_BugzillaSearchEntity.Exclude_keyofBugzillaSearchEntity.id-or-accountId-or-type__"
      },
      "BugzillaSearchParams": {
        "$ref": "#/components/schemas/Omit_BugzillaSearchEntity.id-or-accountId-or-type_"
      },
      "Partial_BugzillaSearchParams_": {
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "dueOffset": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_UserEntity.Exclude_keyofUserEntity.password__": {
        "properties": {
          "email": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "isAdmin",
          "id"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_UserEntity.password_": {
        "$ref": "#/components/schemas/Pick_UserEntity.Exclude_keyofUserEntity.password__"
      },
      "UserState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_UserEntity.password_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "User"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "LoginParams": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Pick_UserEntity.Exclude_keyofUserEntity.id__": {
        "properties": {
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "required": [
          "password",
          "email",
          "isAdmin"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_UserEntity.id_": {
        "$ref": "#/components/schemas/Pick_UserEntity.Exclude_keyofUserEntity.id__"
      },
      "UserParams": {
        "$ref": "#/components/schemas/Omit_UserEntity.id_"
      },
      "Partial_UserParams_": {
        "properties": {
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_ContextEntity.Exclude_keyofContextEntity.id-or-userId-or-stub__": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_ContextEntity.id-or-userId-or-stub_": {
        "$ref": "#/components/schemas/Pick_ContextEntity.Exclude_keyofContextEntity.id-or-userId-or-stub__"
      },
      "ContextParams": {
        "$ref": "#/components/schemas/Omit_ContextEntity.id-or-userId-or-stub_"
      },
      "Pick_ContextEntity.id-or-stub_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "stub": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "stub"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "ContextState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContextParams"
          },
          {
            "$ref": "#/components/schemas/Pick_ContextEntity.id-or-stub_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "Context"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_ProjectEntity.Exclude_keyofProjectEntity.id-or-contextId-or-userId-or-parentId-or-stub__": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_ProjectEntity.id-or-contextId-or-userId-or-parentId-or-stub_": {
        "$ref": "#/components/schemas/Pick_ProjectEntity.Exclude_keyofProjectEntity.id-or-contextId-or-userId-or-parentId-or-stub__"
      },
      "ProjectParams": {
        "$ref": "#/components/schemas/Omit_ProjectEntity.id-or-contextId-or-userId-or-parentId-or-stub_"
      },
      "Pick_ProjectEntity.id-or-parentId-or-stub_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "stub": {
            "type": "string"
          },
          "parentId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "stub",
          "parentId"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "ProjectState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectParams"
          },
          {
            "$ref": "#/components/schemas/Pick_ProjectEntity.id-or-parentId-or-stub_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "Project"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "ServerProjectState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectState"
          },
          {
            "properties": {
              "dueTasks": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "dueTasks"
            ],
            "type": "object"
          }
        ]
      },
      "ServerContextState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContextState"
          },
          {
            "properties": {
              "projects": {
                "items": {
                  "$ref": "#/components/schemas/ServerProjectState"
                },
                "type": "array"
              },
              "dueTasks": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "projects",
              "dueTasks"
            ],
            "type": "object"
          }
        ]
      },
      "ServerUserState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserState"
          },
          {
            "properties": {
              "contexts": {
                "items": {
                  "$ref": "#/components/schemas/ServerContextState"
                },
                "type": "array"
              },
              "inbox": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "contexts",
              "inbox"
            ],
            "type": "object"
          }
        ]
      },
      "Problem": {
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "description"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ServerState": {
        "properties": {
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerUserState"
              }
            ],
            "nullable": true
          },
          "problems": {
            "items": {
              "$ref": "#/components/schemas/Problem"
            },
            "type": "array"
          },
          "schemaVersion": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "problems",
          "schemaVersion"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Pick_ApiItemFilter.Exclude_keyofApiItemFilter.itemHolderId__": {
        "properties": {
          "isTask": {
            "type": "boolean"
          },
          "dueBefore": {
            "type": "string"
          },
          "dueAfter": {
            "type": "string"
          },
          "doneBefore": {
            "type": "string"
          },
          "doneAfter": {
            "type": "string"
          },
          "isDue": {
            "type": "boolean"
          },
          "isDone": {
            "type": "boolean"
          },
          "isSnoozed": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_ApiItemFilter.itemHolderId_": {
        "$ref": "#/components/schemas/Pick_ApiItemFilter.Exclude_keyofApiItemFilter.itemHolderId__"
      },
      "DateTime": {
        "type": "string",
        "description": "A DateTime is an immutable data structure representing a specific date and time and accompanying methods.\nIt contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n\nA DateTime comprises of:\n* A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n* A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n* Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n\nHere is a brief overview of the most commonly used functionality it provides:\n\n* **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}.\nTo create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}.\nTo create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n* **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject }), use the {@link DateTime#year },\n{@link DateTime#month }, {@link DateTime#day }, {@link DateTime#hour }, {@link DateTime#minute }, {@link DateTime#second }, {@link DateTime#millisecond } accessors.\n* **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear }, {@link DateTime#weekNumber }, and {@link DateTime#weekday } accessors.\n* **Configuration** See the {@link DateTime#locale } and {@link DateTime#numberingSystem } accessors.\n* **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set }, {@link DateTime#reconfigure }, {@link DateTime#setZone }, {@link DateTime#setLocale },\n{@link DateTime.plus}, {@link DateTime#minus }, {@link DateTime#endOf }, {@link DateTime#startOf }, {@link DateTime#toUTC }, and {@link DateTime#toLocal }.\n* **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative }, {@link DateTime#toRelativeCalendar }, {@link DateTime#toJSON }, {@link DateTime#toISO },\n{@link DateTime#toHTTP }, {@link DateTime#toObject }, {@link DateTime#toRFC2822 }, {@link DateTime#toString }, {@link DateTime#toLocaleString }, {@link DateTime#toFormat },\n{@link DateTime#toMillis } and {@link DateTime#toJSDate }.\n\nThere's plenty others documented below. In addition, for more information on subtler topics\nlike internationalization, time zones, alternative calendars, validity, and so on, see the external documentation."
      },
      "Pick_ItemEntity.Exclude_keyofItemEntity.id-or-userId-or-sectionId-or-sectionIndex-or-type-or-created__": {
        "properties": {
          "summary": {
            "type": "string"
          },
          "archived": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          },
          "snoozed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "summary",
          "archived",
          "snoozed"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_ItemEntity.id-or-userId-or-sectionId-or-sectionIndex-or-type-or-created_": {
        "$ref": "#/components/schemas/Pick_ItemEntity.Exclude_keyofItemEntity.id-or-userId-or-sectionId-or-sectionIndex-or-type-or-created__"
      },
      "ItemParams": {
        "$ref": "#/components/schemas/Omit_ItemEntity.id-or-userId-or-sectionId-or-sectionIndex-or-type-or-created_"
      },
      "Pick_ItemEntity.id-or-created_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "id",
          "created"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "TaskController": {
        "enum": [
          "manual",
          "list",
          "service"
        ],
        "type": "string",
        "x-enum-varnames": [
          "Manual",
          "ServiceList",
          "Service"
        ]
      },
      "Pick_TaskInfoEntity.due-or-done-or-controller_": {
        "properties": {
          "due": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          },
          "done": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          },
          "controller": {
            "$ref": "#/components/schemas/TaskController"
          }
        },
        "required": [
          "due",
          "done",
          "controller"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "TaskInfoState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pick_TaskInfoEntity.due-or-done-or-controller_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "TaskInfo"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_LinkDetailEntity.Exclude_keyofLinkDetailEntity.id-or-icon__": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_LinkDetailEntity.id-or-icon_": {
        "$ref": "#/components/schemas/Pick_LinkDetailEntity.Exclude_keyofLinkDetailEntity.id-or-icon__"
      },
      "LinkDetailParams": {
        "$ref": "#/components/schemas/Omit_LinkDetailEntity.id-or-icon_"
      },
      "Pick_LinkDetailEntity.icon_": {
        "properties": {
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "icon"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "LinkDetailState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LinkDetailParams"
          },
          {
            "$ref": "#/components/schemas/Pick_LinkDetailEntity.icon_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "LinkDetail"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_NoteDetailEntity.Exclude_keyofNoteDetailEntity.id-or-url__": {
        "properties": {
          "note": {
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_NoteDetailEntity.id-or-url_": {
        "$ref": "#/components/schemas/Pick_NoteDetailEntity.Exclude_keyofNoteDetailEntity.id-or-url__"
      },
      "NoteDetailParams": {
        "$ref": "#/components/schemas/Omit_NoteDetailEntity.id-or-url_"
      },
      "NoteDetailState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NoteDetailParams"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "NoteDetail"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_ServiceDetailEntity.Exclude_keyofServiceDetailEntity.id-or-taskDue-or-taskDone__": {
        "properties": {
          "serviceId": {
            "type": "string"
          },
          "hasTaskState": {
            "type": "boolean"
          }
        },
        "required": [
          "serviceId",
          "hasTaskState"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_ServiceDetailEntity.id-or-taskDue-or-taskDone_": {
        "$ref": "#/components/schemas/Pick_ServiceDetailEntity.Exclude_keyofServiceDetailEntity.id-or-taskDue-or-taskDone__"
      },
      "ServiceListEntity": {
        "properties": {
          "id": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "serviceId",
          "name",
          "url"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ServiceListState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceListEntity"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "ServiceList"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "ServiceDetailState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Omit_ServiceDetailEntity.id-or-taskDue-or-taskDone_"
          },
          {
            "properties": {
              "lists": {
                "items": {
                  "$ref": "#/components/schemas/ServiceListState"
                },
                "type": "array"
              },
              "fields": {},
              "isCurrentlyListed": {
                "type": "boolean"
              },
              "wasEverListed": {
                "type": "boolean"
              },
              "__typename": {
                "type": "string",
                "enum": [
                  "ServiceDetail"
                ],
                "nullable": false
              }
            },
            "required": [
              "lists",
              "fields",
              "isCurrentlyListed",
              "wasEverListed",
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_FileDetailEntity.Exclude_keyofFileDetailEntity.id-or-path-or-size-or-mimetype__": {
        "properties": {
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "filename"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_FileDetailEntity.id-or-path-or-size-or-mimetype_": {
        "$ref": "#/components/schemas/Pick_FileDetailEntity.Exclude_keyofFileDetailEntity.id-or-path-or-size-or-mimetype__"
      },
      "FileDetailParams": {
        "$ref": "#/components/schemas/Omit_FileDetailEntity.id-or-path-or-size-or-mimetype_"
      },
      "Pick_FileDetailEntity.size-or-mimetype_": {
        "properties": {
          "size": {
            "type": "number",
            "format": "double"
          },
          "mimetype": {
            "type": "string"
          }
        },
        "required": [
          "size",
          "mimetype"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "FileDetailState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileDetailParams"
          },
          {
            "$ref": "#/components/schemas/Pick_FileDetailEntity.size-or-mimetype_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "FileDetail"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "ItemDetailState": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/LinkDetailState"
          },
          {
            "$ref": "#/components/schemas/NoteDetailState"
          },
          {
            "$ref": "#/components/schemas/ServiceDetailState"
          },
          {
            "$ref": "#/components/schemas/FileDetailState"
          }
        ]
      },
      "ItemState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemParams"
          },
          {
            "$ref": "#/components/schemas/Pick_ItemEntity.id-or-created_"
          },
          {
            "properties": {
              "detail": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ItemDetailState"
                  }
                ],
                "nullable": true
              },
              "taskInfo": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskInfoState"
                  }
                ],
                "nullable": true
              },
              "__typename": {
                "type": "string",
                "enum": [
                  "Item"
                ],
                "nullable": false
              }
            },
            "required": [
              "detail",
              "taskInfo",
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "Pick_SectionEntity.Exclude_keyofSectionEntity.id-or-userId-or-projectId-or-index-or-stub__": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Omit_SectionEntity.id-or-userId-or-projectId-or-index-or-stub_": {
        "$ref": "#/components/schemas/Pick_SectionEntity.Exclude_keyofSectionEntity.id-or-userId-or-projectId-or-index-or-stub__"
      },
      "SectionParams": {
        "$ref": "#/components/schemas/Omit_SectionEntity.id-or-userId-or-projectId-or-index-or-stub_"
      },
      "Pick_SectionEntity.id-or-stub_": {
        "properties": {
          "id": {
            "type": "string"
          },
          "stub": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "stub"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "SectionState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SectionParams"
          },
          {
            "$ref": "#/components/schemas/Pick_SectionEntity.id-or-stub_"
          },
          {
            "properties": {
              "__typename": {
                "type": "string",
                "enum": [
                  "Section"
                ],
                "nullable": false
              }
            },
            "required": [
              "__typename"
            ],
            "type": "object"
          }
        ]
      },
      "SectionContents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SectionState"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ItemState"
                },
                "type": "array"
              }
            },
            "required": [
              "items"
            ],
            "type": "object"
          }
        ]
      },
      "ProjectContents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectState"
          },
          {
            "properties": {
              "sections": {
                "items": {
                  "$ref": "#/components/schemas/SectionContents"
                },
                "type": "array"
              },
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ItemState"
                },
                "type": "array"
              }
            },
            "required": [
              "sections",
              "items"
            ],
            "type": "object"
          }
        ]
      },
      "ContextContents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContextState"
          },
          {
            "properties": {
              "sections": {
                "items": {
                  "$ref": "#/components/schemas/SectionContents"
                },
                "type": "array"
              },
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ItemState"
                },
                "type": "array"
              }
            },
            "required": [
              "sections",
              "items"
            ],
            "type": "object"
          }
        ]
      },
      "Partial_ProjectParams_": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_ContextParams_": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_SectionParams_": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "ApiItemFilter": {
        "properties": {
          "itemHolderId": {
            "type": "string",
            "nullable": true
          },
          "isTask": {
            "type": "boolean"
          },
          "dueBefore": {
            "type": "string"
          },
          "dueAfter": {
            "type": "string"
          },
          "doneBefore": {
            "type": "string"
          },
          "doneAfter": {
            "type": "string"
          },
          "isDue": {
            "type": "boolean"
          },
          "isDone": {
            "type": "boolean"
          },
          "isSnoozed": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Partial__due-string-or-null--done-string-or-null--__": {
        "properties": {
          "due": {
            "type": "string",
            "nullable": true
          },
          "done": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_ItemParams_": {
        "properties": {
          "summary": {
            "type": "string"
          },
          "archived": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          },
          "snoozed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ],
            "nullable": true
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": ""
  },
  "openapi": "3.0.0",
  "paths": {
    "/service/phabricator/account": {
      "get": {
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PhabricatorAccountState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      },
      "put": {
        "operationId": "CreateAccount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhabricatorAccountState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/PhabricatorAccountParams"
                  }
                },
                "required": [
                  "params"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditAccount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhabricatorAccountState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_PhabricatorAccountParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/phabricator/query": {
      "get": {
        "operationId": "ListQueries",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PhabricatorQueryState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/service/jira/account": {
      "get": {
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JiraAccountState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      },
      "put": {
        "operationId": "CreateAccount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JiraAccountState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/JiraAccountParams"
                  }
                },
                "required": [
                  "params"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/jira/search": {
      "put": {
        "operationId": "CreateSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JiraSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/JiraSearchParams"
                  },
                  "accountId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "accountId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JiraSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_JiraSearchParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSearch",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/google/loginUrl": {
      "get": {
        "operationId": "GetLoginUrl",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/service/google/accounts": {
      "get": {
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GoogleAccountState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/service/google/search": {
      "put": {
        "operationId": "CreateSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleMailSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/GoogleMailSearchParams"
                  },
                  "accountId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "accountId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleMailSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_GoogleMailSearchParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSearch",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/github/loginUrl": {
      "get": {
        "operationId": "GetLoginUrl",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/service/github/accounts": {
      "get": {
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GithubAccountState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/service/github/search": {
      "put": {
        "operationId": "CreateSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/GithubSearchParams"
                  },
                  "accountId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "accountId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_GithubSearchParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSearch",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/bugzilla/account": {
      "get": {
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BugzillaAccountState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      },
      "put": {
        "operationId": "CreateAccount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BugzillaAccountState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/BugzillaAccountParams"
                  }
                },
                "required": [
                  "params"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/service/bugzilla/search": {
      "put": {
        "operationId": "CreateSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BugzillaSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/BugzillaSearchParams"
                  },
                  "accountId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "accountId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditSearch",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BugzillaSearchState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_BugzillaSearchParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSearch",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/page": {
      "get": {
        "operationId": "GetPageContent",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/login": {
      "post": {
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginParams"
              }
            }
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "operationId": "Logout",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": []
      }
    },
    "/api/users": {
      "get": {
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": []
      },
      "put": {
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserParams"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Partial_UserParams_"
                  },
                  {
                    "properties": {
                      "currentPassword": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteUser",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/state": {
      "post": {
        "operationId": "GetState",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "itemFilter": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Omit_ApiItemFilter.itemHolderId_"
                      },
                      {
                        "items": {
                          "$ref": "#/components/schemas/Omit_ApiItemFilter.itemHolderId_"
                        },
                        "type": "array"
                      }
                    ]
                  }
                },
                "required": [
                  "itemFilter"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/project": {
      "put": {
        "operationId": "CreateProject",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/ProjectParams"
                  },
                  "taskListId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "taskListId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditProject",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_ProjectParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteProject",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/project/contents": {
      "post": {
        "operationId": "ListContents",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProjectContents"
                    },
                    {
                      "$ref": "#/components/schemas/ContextContents"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "itemFilter": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Omit_ApiItemFilter.itemHolderId_"
                      },
                      {
                        "items": {
                          "$ref": "#/components/schemas/Omit_ApiItemFilter.itemHolderId_"
                        },
                        "type": "array"
                      }
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/project/move": {
      "patch": {
        "operationId": "MoveProject",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "taskListId": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "taskListId",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/context": {
      "put": {
        "operationId": "CreateContext",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/ContextParams"
                  }
                },
                "required": [
                  "params"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditContext",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_ContextParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteContext",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/section": {
      "put": {
        "operationId": "CreateSection",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/SectionParams"
                  },
                  "beforeId": {
                    "type": "string",
                    "nullable": true
                  },
                  "taskListId": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "taskListId"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditSection",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_SectionParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteSection",
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item/list": {
      "post": {
        "operationId": "ListItems",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ItemState"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "itemFilter": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ApiItemFilter"
                      },
                      {
                        "items": {
                          "$ref": "#/components/schemas/ApiItemFilter"
                        },
                        "type": "array"
                      }
                    ]
                  }
                },
                "required": [
                  "itemFilter"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item/task": {
      "put": {
        "operationId": "CreateTask",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "task": {
                    "properties": {
                      "done": {
                        "type": "string",
                        "nullable": true
                      },
                      "due": {
                        "type": "string",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  },
                  "item": {
                    "$ref": "#/components/schemas/ItemParams"
                  },
                  "beforeId": {
                    "type": "string",
                    "nullable": true
                  },
                  "itemHolderId": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "item"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EditTask",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial__due-string-or-null--done-string-or-null--__"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item/task/controller": {
      "patch": {
        "operationId": "EditTaskController",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "controller": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TaskController"
                      }
                    ],
                    "nullable": true
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "controller",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item/link": {
      "put": {
        "operationId": "CreateLink",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isTask": {
                    "type": "boolean"
                  },
                  "link": {
                    "$ref": "#/components/schemas/LinkDetailParams"
                  },
                  "item": {
                    "$ref": "#/components/schemas/ItemParams"
                  },
                  "beforeId": {
                    "type": "string",
                    "nullable": true
                  },
                  "itemHolderId": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "isTask",
                  "link",
                  "item"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item/move": {
      "patch": {
        "operationId": "MoveItem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "beforeId": {
                    "type": "string",
                    "nullable": true
                  },
                  "itemHolderId": {
                    "type": "string",
                    "nullable": true
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemHolderId",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/item": {
      "patch": {
        "operationId": "EditItem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/Partial_ItemParams_"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "params",
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteItem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemState"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    }
  }
}